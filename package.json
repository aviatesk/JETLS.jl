{
  "name": "jetls-client",
  "displayName": "JETLS Client",
  "description": "A new language server for Julia",
  "author": "Shuhei Kadowaki",
  "license": "MIT",
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/aviatesk/JETLS.jl"
  },
  "publisher": "aviatesk",
  "extensionKind": [
    "workspace"
  ],
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters",
    "Testing"
  ],
  "keywords": [
    "Julia",
    "JETLS",
    "JET",
    "language server"
  ],
  "engines": {
    "vscode": "^1.96.0"
  },
  "activationEvents": [
    "onLanguage:julia",
    "workspaceContains:Project.toml"
  ],
  "main": "./out/jetls-client",
  "contributes": {
    "commands": [
      {
        "command": "jetls-client.restartLanguageServer",
        "title": "JETLS Client: Restart JETLS Language Server"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "JETLS configurations",
      "properties": {
        "jetls-client.juliaExecutablePath": {
          "scope": "resource",
          "type": "string",
          "default": "julia",
          "description": "Path to the Julia executable."
        },
        "jetls-client.juliaThreads": {
          "scope": "resource",
          "type": "string",
          "default": "auto",
          "description": "Number of Julia threads to use (used as --threads= option). Default is 'auto'."
        },
        "jetls-client.jetlsDirectory": {
          "scope": "resource",
          "type": "string",
          "default": "",
          "description": "Directory path for JETLS project environment (used as --project= option). If not set, uses global Julia environment."
        },
        "jetls-client.communicationChannel": {
          "scope": "resource",
          "type": "string",
          "enum": [
            "auto",
            "pipe",
            "stdio",
            "socket"
          ],
          "default": "auto",
          "description": "Communication channel for the language server. 'auto' (default) selects the best option based on environment, 'pipe' for local development with stdout isolation, 'socket' for network communication, or 'stdio' for maximum compatibility (but risk of stdout pollution)."
        },
        "jetls-client.socketPort": {
          "scope": "resource",
          "type": "number",
          "default": 0,
          "description": "Port number for socket communication (0 = auto-assign). Only used when 'socket' communication channel is used."
        },
        "jetls-client.jetlsSettings": {
          "scope": "resource",
          "type": "object",
          "default": {},
          "markdownDescription": "JETLS server configuration settings. See [JETLS Configuration](https://github.com/aviatesk/JETLS.jl#configuration) for available options.",
          "properties": {
            "full_analysis": {
              "type": "object",
              "properties": {
                "debounce": {
                  "type": "number",
                  "default": 1,
                  "minimum": 0,
                  "description": "Debounce time in seconds before triggering full analysis after a document change."
                }
              }
            },
            "formatter": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Runic",
                    "JuliaFormatter"
                  ],
                  "default": "Runic",
                  "description": "Preset formatter to use. 'Runic' (default) or 'JuliaFormatter'."
                },
                {
                  "type": "object",
                  "properties": {
                    "custom": {
                      "type": "object",
                      "properties": {
                        "executable": {
                          "type": "string",
                          "description": "Path to custom formatter executable for document formatting. The formatter should read Julia code from stdin and output formatted code to stdout. Optional."
                        },
                        "executable_range": {
                          "type": "string",
                          "description": "Path to custom formatter executable for range formatting. Should accept --lines=START:END argument. Optional."
                        }
                      }
                    }
                  }
                }
              ],
              "default": "Runic",
              "markdownDescription": "Formatter configuration. Can be a preset name ('Runic' or 'JuliaFormatter') or a custom formatter object. See [Formatting](https://github.com/aviatesk/JETLS.jl#formatting) for details."
            },
            "testrunner": {
              "type": "object",
              "properties": {
                "executable": {
                  "type": "string",
                  "default": "",
                  "description": "Path to the TestRunner.jl executable. If empty, uses 'testrunner' from PATH."
                }
              }
            }
          }
        }
      }
    }
  },
  "scripts": {
    "build": "node esbuild.js --production",
    "watch": "node esbuild.js --watch",
    "tsc": "tsc --noEmit",
    "lint": "eslint",
    "check": "npm run tsc && npm run lint",
    "vscode:prepublish": "npm run tsc && npm run lint && npm run build"
  },
  "dependencies": {
    "glob": "^11.0.0",
    "vscode-languageclient": "^9.0.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@stylistic/eslint-plugin": "^2.9.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20",
    "@types/vscode": "^1.75.1",
    "@vscode/test-electron": "^2.3.9",
    "esbuild": "^0.25.10",
    "eslint": "^9.13.0",
    "fs": "^0.0.1-security",
    "mocha": "^10.3.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.16.0"
  },
  "private": true
}
