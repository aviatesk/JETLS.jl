var documenterSearchIndex = {"docs":
[{"location":"communication-channels/#Communication-channels","page":"Communication channels","title":"Communication channels","text":"","category":"section"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"JETLS supports multiple communication channels between the client and server. Choose based on your environment and requirements:","category":"page"},{"location":"communication-channels/#auto-(default-for-VSCode)","page":"Communication channels","title":"auto (default for VSCode)","text":"","category":"section"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"The jetls-client VSCode extension automatically selects the most appropriate channel based on your environment:","category":"page"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"Local development: pipe for maximum safety\nRemote SSH/WSL: pipe (works well in these environments)\nDev Containers: stdio for compatibility","category":"page"},{"location":"communication-channels/#pipe-(Unix-domain-socket-/-named-pipe)","page":"Communication channels","title":"pipe (Unix domain socket / named pipe)","text":"","category":"section"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"Advantages: Complete isolation from stdin/stdout, preventing protocol corruption; fastest for local communication\nBest for: Local development, Remote SSH, WSL\nLimitations: Not suitable for cross-container communication","category":"page"},{"location":"communication-channels/#socket-(TCP)","page":"Communication channels","title":"socket (TCP)","text":"","category":"section"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"Advantages: Complete isolation from stdin/stdout, preventing protocol corruption; works across network boundaries; supports port forwarding\nBest for: Remote development with port forwarding\nLimitations: May require firewall configuration; potentially less secure than local alternatives","category":"page"},{"location":"communication-channels/#stdio","page":"Communication channels","title":"stdio","text":"","category":"section"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"Advantages: Simplest setup; maximum compatibility; works everywhere\nBest for: Dev containers; environments where pipe doesn't work\nLimitations: Risk of protocol corruption if any code writes to stdin/stdout","category":"page"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"warning: Warning\nWhen using stdio mode, any println(stdout, ...) in your code or dependency packages may corrupt the LSP protocol and break the connection. Prefer pipe or socket modes when possible.","category":"page"},{"location":"communication-channels/#Command-line-usage","page":"Communication channels","title":"Command-line usage","text":"","category":"section"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"When using JETLS from the command line or with other editors:","category":"page"},{"location":"communication-channels/","page":"Communication channels","title":"Communication channels","text":"# Standard input/output (default, --stdio can be omitted)\njulia runserver.jl --stdio\n\n# Unix domain socket or Windows named pipe\njulia runserver.jl --pipe=/tmp/jetls.sock\n\n# TCP socket\njulia runserver.jl --socket=7777","category":"page"},{"location":"formatting/#Formatting","page":"Formatter integration","title":"Formatting","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"JETLS provides document formatting support through integration with external formatting tools. By default, Runic.jl is used, but you can configure alternative formatters or use custom formatting executables.","category":"page"},{"location":"formatting/#Features","page":"Formatter integration","title":"Features","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"Document formatting: Format entire Julia files\nRange formatting: Format selected code regions (Runic and custom formatters only)\nProgress notifications: Visual feedback during formatting operations for clients that support work done progress","category":"page"},{"location":"formatting/#Prerequisites","page":"Formatter integration","title":"Prerequisites","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"JETLS supports preset formatters as well as custom formatting executables. For preset formatters, install your preferred formatter and ensure it's available in your system PATH:","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"Runic (default):\njulia -e 'using Pkg; Pkg.Apps.add(\"Runic\")'\nJuliaFormatter:\njulia -e 'using Pkg; Pkg.Apps.add(\"JuliaFormatter\")'","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"Note that you need to manually make ~/.julia/bin available on the PATH environment for the formatter executables to be accessible. See https://pkgdocs.julialang.org/dev/apps/ for the details.","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"For custom formatters, no installation is requiredâ€”simply configure the path to your executable in .JETLSConfig.toml (see the custom formatter section below).","category":"page"},{"location":"formatting/#Formatter-configuration","page":"Formatter integration","title":"Formatter configuration","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"Configure the formatter using either a .JETLSConfig.toml file in your project root or via LSP configuration (see How to configure JETLS for details). The configuration supports three options:","category":"page"},{"location":"formatting/#Preset-\"Runic\"-(default)","page":"Formatter integration","title":"Preset \"Runic\" (default)","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"formatter = \"Runic\"","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"In this case, JETLS will look for the runic executable and use it to perform formatting.","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"This is the default setting and doesn't require explicit configuration. Runic supports both document and range formatting.","category":"page"},{"location":"formatting/#Preset-\"JuliaFormatter\"","page":"Formatter integration","title":"Preset \"JuliaFormatter\"","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"formatter = \"JuliaFormatter\"","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"In this case, JETLS will look for the jlfmt executable and use it to perform formatting.","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"If a .JuliaFormatter.toml configuration file is found in your project, jlfmt will use those settings. Otherwise, it uses default settings with formatting options provided by the editor client (such as tab size) when available.","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"warning: Warning\nNote that JuliaFormatter currently, as of v2.2.0, only supports full document formatting, not range formatting.","category":"page"},{"location":"formatting/#Custom-formatter","page":"Formatter integration","title":"Custom formatter","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"[formatter.custom]\nexecutable = \"/path/to/custom-formatter\"\nexecutable_range = \"/path/to/custom-range-formatter\"","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"Custom formatters should accept Julia code via stdin and output formatted code to stdout, following the same interface as runic:","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"executable: Command for full document formatting. The formatter should read the entire Julia source code from stdin, format it completely, and write the formatted result to stdout. The exit code should be 0 on success.\nexecutable_range: Command for range formatting. The formatter should accept a --lines=START:END argument to format only the specified line range. It should read the entire document code from stdin and write the entire document code to stdout with only the specified region formatted. The rest of the document must remain unchanged.","category":"page"},{"location":"formatting/#Troubleshooting","page":"Formatter integration","title":"Troubleshooting","text":"","category":"section"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"If you see an error about the formatter not being found:","category":"page"},{"location":"formatting/","page":"Formatter integration","title":"Formatter integration","text":"Ensure you've installed the formatter as described above\nCheck that the formatter executable is in your system PATH by running which runic or which jlfmt\nFor custom formatters, verify the executable path specified in your settings\nRestart your editor to ensure it picks up the updated PATH or configuration","category":"page"},{"location":"configuration/#Configuration","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"JETLS supports various configuration options. This documentation uses TOML format to describe the configuration schema.","category":"page"},{"location":"configuration/#Available-configurations","page":"Configuration","title":"Available configurations","text":"","category":"section"},{"location":"configuration/#[full_analysis]-debounce","page":"Configuration","title":"[full_analysis] debounce","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Type: number (seconds)\nDefault: 1.0","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Debounce time in seconds before triggering full analysis after a document change. JETLS performs type-aware analysis using JET.jl to detect potential errors. Higher values reduce analysis frequency (saving CPU) but may feel less responsive.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"[full_analysis]\ndebounce = 2.0  # Wait 2 seconds after typing stops before analyzing","category":"page"},{"location":"configuration/#formatter","page":"Configuration","title":"formatter","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Type: string or table\nDefault: \"Runic\"","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Configures the formatter backend for document and range formatting. Accepts either a preset formatter name or a custom formatter configuration.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Preset options:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"\"Runic\" (default): Uses Runic.jl\n\"JuliaFormatter\": Uses JuliaFormatter.jl","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Examples:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"# Use JuliaFormatter preset\nformatter = \"JuliaFormatter\"\n\n# Or use custom formatter (both fields optional)\n[formatter.custom]\nexecutable = \"/path/to/custom-formatter\"\nexecutable_range = \"/path/to/custom-range-formatter\"","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"See Formatting for detailed configuration instructions and setup requirements.","category":"page"},{"location":"configuration/#[testrunner]-executable","page":"Configuration","title":"[testrunner] executable","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Type: string (path)\nDefault: \"testrunner\" (or \"testrunner.bat\" on Windows)","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Path to the TestRunner.jl executable for running individual @testset blocks and @test cases. If not specified, JETLS looks for testrunner in your PATH (typically ~/.julia/bin/testrunner).","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"[testrunner]\nexecutable = \"/custom/path/to/testrunner\"","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"See TestRunner integration for setup instructions.","category":"page"},{"location":"configuration/#How-to-configure-JETLS","page":"Configuration","title":"How to configure JETLS","text":"","category":"section"},{"location":"configuration/#Method-1:-Project-specific-configuration-file","page":"Configuration","title":"Method 1: Project-specific configuration file","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Create a .JETLSConfig.toml file in your project root. This configuration method works client-agnostically, thus allows projects to commit configuration to VCS without writing JETLS configurations in various formats that each client can understand.","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Example .JETLSConfig.toml:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"[full_analysis]\ndebounce = 2.0\n\n[testrunner]\nexecutable = \"/custom/path/to/testrunner\"\n\n# Use JuliaFormatter instead of Runic\nformatter = \"JuliaFormatter\"","category":"page"},{"location":"configuration/#Method-2:-Editor-configuration-via-LSP","page":"Configuration","title":"Method 2: Editor configuration via LSP","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"If your client supports workspace/configuration, you can configure JETLS in a client-specific manner. As examples, we show the configuration methods for the VSCode extension jetls-client, and the Zed extension aviatesk/zed-julia#avi/JETLS.","category":"page"},{"location":"configuration/#VSCode-(jetls-client-extension)","page":"Configuration","title":"VSCode (jetls-client extension)","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Configure JETLS in VSCode's settings.json file with jetls-client.jetlsSettings section:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Example .vscode/settings.json:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"{\n  \"jetls-client.jetlsSettings\": {\n    \"full_analysis\": {\n      \"debounce\": 2.0\n    },\n    \"testrunner\": {\n      \"executable\": \"/custom/path/to/testrunner\"\n    },\n    \"formatter\": \"JuliaFormatter\"\n  }\n}","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"See package.json for the complete list of available VSCode settings and their descriptions.","category":"page"},{"location":"configuration/#Zed-([aviatesk/zed-julia#avi/JETLS](https://github.com/aviatesk/zed-julia/tree/avi/JETLS)-extension)","page":"Configuration","title":"Zed (aviatesk/zed-julia#avi/JETLS extension)","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Configure JETLS in Zed's settings.json file with the lsp.JETLS.settings section:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Example .zed/settings.json:","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"{\n  \"lsp\": {\n    \"JETLS\": {\n      // Required configuration items for starting the server\n      \"binary\": {\n        // ...\n      },\n      // JETLS configurations\n      \"settings\": {\n        \"full_analysis\": {\n          \"debounce\": 2.0\n        },\n        \"testrunner\": {\n          \"executable\": \"/custom/path/to/testrunner\"\n        },\n        \"formatter\": \"JuliaFormatter\"\n      }\n    }\n  }\n}","category":"page"},{"location":"configuration/#Configuration-priority","page":"Configuration","title":"Configuration priority","text":"","category":"section"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"When multiple configuration sources are present, they are merged in priority order (highest first):","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"Project-specific .JETLSConfig.toml\nEditor configuration via LSP\nBuilt-in defaults","category":"page"},{"location":"configuration/","page":"Configuration","title":"Configuration","text":"The .JETLSConfig.toml file takes precedence, since it provides a client-agnostic way to configure JETLS that works consistently across all editors.","category":"page"},{"location":"#JETLS.jl-documentation","page":"Index","title":"JETLS.jl documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"(Image: ) (Image: )","category":"page"},{"location":"","page":"Index","title":"Index","text":"The goal of this project is to develop a new language server for Julia, currently called \"JETLS\". JETLS aims to enhance developer productivity by providing advanced static analysis and seamless integration with the Julia runtime. By leveraging tooling technologies like JET.jl, JuliaSyntax.jl and JuliaLowering.jl, JETLS aims to offer enhanced language features such as type-sensitive diagnostics, macro-aware go-to definition and such.","category":"page"},{"location":"#Getting-started","page":"Index","title":"Getting started","text":"","category":"section"},{"location":"#VSCode","page":"Index","title":"VSCode","text":"","category":"section"},{"location":"#Requirements","page":"Index","title":"Requirements","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"VSCode v1.96.0 or higher\nJulia v\"1.12.0\" or higher","category":"page"},{"location":"#Steps","page":"Index","title":"Steps","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"info: Info\nCurrently, the jetls-client VSCode extension is not bundled with JETLS.jl as a Julia package, requiring you to explicitly specify the path to your JETLS.jl installation via the jetls-client.jetlsDirectory configuration and ensure the environment is properly initialized with Pkg.instantiate(). Since JETLS is currently distributed as source code, updates must be performed manually using git pull, followed by Pkg.update() and Pkg.instantiate() to refresh dependencies.","category":"page"},{"location":"","page":"Index","title":"Index","text":"Clone and initialize this repository:\ngit clone https://github.com/aviatesk/JETLS.jl.git\ncd JETLS.jl\njulia --project=. -e 'using Pkg; Pkg.instantiate()'\nInstall the JETLS Client VSCode extension (jetls-client):\nOpen VSCode\nGo to Extensions (Invoke the View: Show Extensions command)\nSearch for \"JETLS Client\"\nClick Install\nConfigure the extension:\nOpen VSCode settings\nSet jetls-client.jetlsDirectory to the path of the cloned JETLS.jl repository\n(Optional) Set jetls-client.juliaExecutablePath to your Julia executable path (default: julia)\nOpen any Julia file","category":"page"},{"location":"#Other-editors","page":"Index","title":"Other editors","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"info: Info\nThese setups use generic language clients, requiring you to explicitly specify the path to your JETLS.jl installation and ensure the environment is properly initialized with Pkg.instantiate(). Since JETLS is currently distributed as source code, updates must be performed manually using git pull, followed by Pkg.update() and Pkg.instantiate() to refresh dependencies.","category":"page"},{"location":"","page":"Index","title":"Index","text":"warning: Warning\nThese setups are basically very minimal and do not necessarily properly utilize the Communication channels that we recommends (i.e. pipe or socket). Many of these setups simply use stdio as the communication channel, but as noted in the documentation, there are potential risks of breaking LSP connections due to writes to stdout that may occur when loading dependency packages.","category":"page"},{"location":"#Emacs","page":"Index","title":"Emacs","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Minimal Emacs (eglot client) setup:","category":"page"},{"location":"","page":"Index","title":"Index","text":"(add-to-list 'eglot-server-programs\n              '(((julia-mode :language-id \"julia\")\n                (julia-ts-mode :language-id \"julia\"))\n                \"julia\"\n                \"--startup-file=no\"\n                \"--history-file=no\"\n                \"--project=/path/to/JETLS.jl\"\n                \"--threads=auto\"\n                \"/path/to/JETLS.jl/runserver.jl\"\n                \"--socket\"\n                :autoport))","category":"page"},{"location":"#Neovim","page":"Index","title":"Neovim","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Minimal Neovim setup (requires Neovim v0.11):","category":"page"},{"location":"","page":"Index","title":"Index","text":"vim.lsp.config(\"jetls\", {\n    cmd = {\n        \"julia\",\n        \"--startup-file=no\",\n        \"--history-file=no\",\n        \"--project=/path/to/JETLS.jl\",\n        \"--threads=auto\",\n        \"/path/to/JETLS.jl/runserver.jl\",\n    },\n    filetypes = {\"julia\"},\n})\nvim.lsp.enable(\"jetls\")","category":"page"},{"location":"#Zed","page":"Index","title":"Zed","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Zed extension for Julia/JETLS is available: See aviatesk/zed-julia#avi/JETLS for installation steps.","category":"page"},{"location":"#Helix","page":"Index","title":"Helix","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Minimal Helix setup:","category":"page"},{"location":"","page":"Index","title":"Index","text":"languages.toml","category":"page"},{"location":"","page":"Index","title":"Index","text":"[[language]]\nname = \"julia\"\nlanguage-servers = [ \"jetls\" ]\n\n[language-server]\njetls = { command = \"julia\", args = [\"--startup-file=no\", \"--history-file=no\", \"--project=/path/to/JETLS.jl\", \"--threads=auto\", \"/path/to/JETLS.jl/runserver.jl\"] }","category":"page"},{"location":"#Quick-links","page":"Index","title":"Quick links","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"},{"location":"testrunner/#TestRunner-integration","page":"TestRunner integration","title":"TestRunner integration","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"JETLS integrates with TestRunner.jl to provide an enhanced testing experience directly within your editor. This feature allows you to run individual @testset blocks directly from your development environment.","category":"page"},{"location":"testrunner/#Prerequisites","page":"TestRunner integration","title":"Prerequisites","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"To use this feature, you need to install the testrunner executable:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"julia -e 'using Pkg; Pkg.Apps.add(url=\"https://github.com/aviatesk/TestRunner.jl\")'","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Note that you need to manually make ~/.julia/bin available on the PATH environment for the testrunner executable to be accessible. See https://pkgdocs.julialang.org/dev/apps/ for the details.","category":"page"},{"location":"testrunner/#Features","page":"TestRunner integration","title":"Features","text":"","category":"section"},{"location":"testrunner/#Code-lens","page":"TestRunner integration","title":"Code lens","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"When you open a Julia file containing @testset blocks, JETLS displays interactive code lenses above each @testset:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"â–¶ Run \"testset_name\": Run the testset for the first time<img class=\"display-light-only\" src=\"./assets/testrunner-code-lens.png\" alt=\"TestRunner Code Lens\"/>\n<img class=\"display-dark-only\" src=\"./assets/testrunner-code-lens-dark.png\" alt=\"TestRunner Code Lens\"/>","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"After running tests, the code lens is refreshed as follows:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"â–¶ Rerun \"testset_name\" [summary]: Re-run a testset that has previous results\nâ˜° Open logs: View the detailed test output in a new editor tab\nâœ“ Clear result: Remove the test results and inline diagnostics<img class=\"display-light-only\" src=\"./assets/testrunner-code-lens-refreshed.png\" alt=\"TestRunner Code Lens with Results\"/>\n<img class=\"display-dark-only\" src=\"./assets/testrunner-code-lens-refreshed-dark.png\" alt=\"TestRunner Code Lens with Results\"/>","category":"page"},{"location":"testrunner/#Code-actions","page":"TestRunner integration","title":"Code actions","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"You can trigger test runs via \"code actions\" that are explicitly requested by the user:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Inside a @testset block: Run the entire testset<img class=\"display-light-only\" src=\"./assets/testrunner-code-actions.png\" alt=\"TestRunner Code Actions\"/>\n<img class=\"display-dark-only\" src=\"./assets/testrunner-code-actions-dark.png\" alt=\"TestRunner Code Actions\"/>","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"On an individual @test macro: Run just that specific test case<img class=\"display-light-only\" src=\"./assets/testrunner-code-actions-test-case.png\" alt=\"TestRunner Code Actions @test case\"/>\n<img class=\"display-dark-only\" src=\"./assets/testrunner-code-actions-test-case-dark.png\" alt=\"TestRunner Code Actions @test case\"/>","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Note that when running individual @test cases, the error results are displayed as temporary diagnostics for 10 seconds. Click â˜° Open logs button in the pop up message to view detailed error messages that persist.","category":"page"},{"location":"testrunner/#Test-diagnostics","page":"TestRunner integration","title":"Test diagnostics","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Failed tests are displayed as diagnostics (red squiggly lines) at the exact lines where the failures occurred, making it easy to identify and fix issues:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"<img class=\"display-light-only\" src=\"./assets/testrunner-diagnostics.png\" alt=\"TestRunner Diagnostics\"/>\n<img class=\"display-dark-only\" src=\"./assets/testrunner-diagnostics-dark.png\" alt=\"TestRunner Diagnostics\"/>","category":"page"},{"location":"testrunner/#Progress-notifications","page":"TestRunner integration","title":"Progress notifications","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"For clients that support work done progress, JETLS shows progress notifications while tests are running, keeping you informed about long-running test suites.","category":"page"},{"location":"testrunner/#Supported-patterns","page":"TestRunner integration","title":"Supported patterns","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"The TestRunner integration supports:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Named @testset blocks (via code lens or code actions):\nusing Test\n\n# supported: named `@testset`\n@testset \"foo\" begin\n  @test sin(0) == 0\n  @test sin(Inf) == 0\n  @test_throws ErrorException sin(Inf) == 0\n  @test cos(Ï€) == -1\n\n    # supported: nested named `@testset`\n    @testset \"bar\" begin\n      @test sin(Ï€) == 0\n      @test sin(0) == 1\n      @test cos(Inf) == -1\n    end\nend\n\n# unsupported: `@testset` inside function definition\nfunction test_func1()\n  @testset \"inside function\" begin\n    @test true\n  end\nend\n\n# supported: this pattern is fine\nfunction test_func2()\n  @testset \"inside function\" begin\n    @test true\n  end\nend\n@testset \"test_func2\" test_func2()\nIndividual @test macros (via code actions only):\n# Run individual tests directly\n@test 1 + 1 == 2\n@test sqrt(4) â‰ˆ 2.0\n\n# Also works inside testsets\n@testset \"math tests\" begin\n  @test sin(0) == 0  # Can run just this test\n  @test cos(Ï€) == -1  # Or just this one\nend\n\n# Multi-line `@test` expressions are just fine\n@test begin\n  x = complex_calculation()\n  validate(x)\nend\n\n# Other Test.jl macros are supported too\n@test_throws DomainErrors sin(Inf)","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"See the TestRunner.jl README for more details.","category":"page"},{"location":"testrunner/#Troubleshooting","page":"TestRunner integration","title":"Troubleshooting","text":"","category":"section"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"If you see an error about testrunner not being found:","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Ensure you've installed TestRunner.jl as described above\nCheck that testrunner is in your system PATH by running which testrunner: otherwise you may need to add ~/.julia/bin to PATH\nRestart your editor to ensure it picks up the updated PATH","category":"page"},{"location":"testrunner/","page":"TestRunner integration","title":"TestRunner integration","text":"Test execution requires that your file is saved and matches the on-disk version. If you see a message asking you to save the file first, make sure to save your changes before running tests.","category":"page"}]
}
